#!/usr/bin/env -S python
# SPDX-License-Identifier: MIT
# Copyright 2025 hirmiura (https://github.com/hirmiura)

"""csvファイルからpotファイルを生成する。"""

from __future__ import annotations

import argparse
import csv
import os
import re
import sys
from datetime import datetime, timedelta, timezone

TZ = timezone(timedelta(hours=+9), "JST")


def pargs() -> argparse.Namespace:
    """コマンドライン引数を処理する

    Returns:
        argparse.Namespace: 処理した引数
    """
    parser = argparse.ArgumentParser(description="csvファイルからpotファイルを生成する。")
    parser.add_argument(
        "-i",
        metavar="INPUT",
        type=argparse.FileType("r", encoding="utf-8-sig"),
        default="-",
        help="入力CSVファイル。指定されなければ標準入力",
    )
    parser.add_argument(
        "-o",
        metavar="OUTPUT",
        type=argparse.FileType("w", encoding="utf-8"),
        default="-",
        help="出力POTファイル。指定されなければ標準出力",
    )
    parser.add_argument("--version", action="version", version="%(prog)s 0.1.0")
    args = parser.parse_args()
    return args


def pot_header() -> list[str]:
    """potヘッダを生成する

    Returns:
        list[str]: ヘッダ
    """
    pottext = [r"# Generated by csv2pot.py.", 'msgid ""', 'msgstr ""']
    dt_now = datetime.now(TZ)
    pottext.extend(
        [
            f'"POT-Creation-Date: {dt_now.strftime("%Y-%m-%d %H:%M%z")}\\n"',
            r'"MIME-Version: 1.0\n"',
            r'"Content-Type: text/plain; charset=UTF-8\n"',
            r'"Content-Transfer-Encoding: 8bit\n"',
            "",
        ]
    )
    return pottext


def main() -> int:
    """メイン関数

    Returns:
        int: 成功時は0を返す
    """
    args = pargs()
    reader = csv.reader(args.i)
    pottext = pot_header()

    # csvから読み込みpotを生成する
    for row in reader:
        if not row[0]:  # 空行またはコンテキストがない
            continue  # スキップ

        ctxt = row[0]  # コンテキスト
        msgid = escape(row[1]) if row[1] else ""  # 英文
        msgstr = escape(row[2]) if row[2] and row[1] != row[2] else ""  # 訳文(あれば)

        pottext.extend([f'msgctxt "{ctxt}"', f'msgid "{msgid}"', f'msgstr "{msgstr}"', ""])

    # 改行コードを指定して書き出し
    pottext = "\n".join(pottext) + "\n"
    try:
        args.o.write(pottext)
    except BrokenPipeError:
        # パイプが切れた時のエラーを消す
        devnull = os.open(os.devnull, os.O_WRONLY)
        os.dup2(devnull, sys.stdout.fileno())
        return 1

    return 0


CRE_CRLF = re.compile(r"(\r\n|\n)")
ESC_TRANS = str.maketrans(
    {
        # "\\": "\\\\",
        '"': r"\"",
    }
)


def escape(text: str) -> str:
    """エスケープする"""
    assert text is not None
    text = text.translate(ESC_TRANS)
    text = CRE_CRLF.sub(r"\\n", text)
    return text


if __name__ == "__main__":
    sys.exit(main())
